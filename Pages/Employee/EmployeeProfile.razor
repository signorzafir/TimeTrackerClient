@page "/employee/profile"
@using Microsoft.AspNetCore.Components.Authorization
@using TimeTrackerClient.Providers
@using TimeTrackerClient.Services.Base
@using TimeTrackerClient.Services.Employee
@inject IEmployeeService employeeService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authStateProvider


<header style="text-align: center; margin-bottom: 30px;">
    <h1 style="font-size: 3rem; font-weight: 700; margin-bottom: 10px;">TimeTracker Client</h1>
</header>



@if (!string.IsNullOrEmpty(errorMessage))
{
    <div style="color: red; margin-bottom: 15px; font-weight: 600;">@errorMessage</div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div style="color: green; margin-bottom: 15px; font-weight: 600;">@successMessage</div>
}

@if (isLoading)
{
    <p style="color: #777; font-style: italic;">Loading profile...</p>
}
else if (employee is not null)
{
    
    <div style="display: flex; flex-direction: column; justify-content: center; align-items: center; min-height: 85vh; background-color: #f4f6f8; padding: 20px;">

        <!-- Profile Info -->
        <div style="border: 1px solid #ccc; padding: 20px; border-radius: 8px; max-width: 520px; width: 100%; background-color: #f9f9f9; box-shadow: 0 2px 5px rgba(0,0,0,0.1); margin-bottom: 30px;">
            <h4 style="margin-bottom: 15px; color: #34495e;">Profile Information</h4>
            <p><strong>Personal Number:</strong> <span style="color: #555;">@employee.PersonalNumber</span></p>
            <p><strong>Hourly Wage:</strong> <span style="color: #555;">@employee.HourlyWage</span></p>
            
        </div>

        <!-- Update Form -->
        <EditForm Model="updateDto" OnValidSubmit="HandleUpdate" style="max-width: 520px; width: 100%; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.1);">
            <DataAnnotationsValidator />
            <ValidationSummary style="color: red; margin-bottom: 15px;" />

            <div style="margin-bottom: 15px;">
                <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #2c3e50;">Full Name</label>
                <InputText @bind-Value="updateDto.FullName" style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;" />
            </div>

            <div style="margin-bottom: 15px;">
                <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #2c3e50;">Phone Number</label>
                <InputText @bind-Value="updateDto.PhoneNumber" style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;" />
            </div>

            <div style="margin-bottom: 15px;">
                <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #2c3e50;">Address</label>
                <InputText @bind-Value="updateDto.Address" style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;" />
            </div>

            <div style="margin-bottom: 15px;">
                <label style="display: block; margin-bottom: 5px; font-weight: 600; color: #2c3e50;">Emergency Contact</label>
                <InputText @bind-Value="updateDto.EmergencyContact" style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;" />
            </div>

            <div>
                <button type="submit" style="padding: 10px 18px; background-color: #4CAF50; color: white; border: none; border-radius: 5px; font-weight: 600; cursor: pointer; transition: background-color 0.3s ease;">
                    Save Changes
                </button>
            </div>
        </EditForm>
    </div>
}


@code {
    private EmployeeReadDto? employee;
    private EmployeeUpdateDto updateDto = new();
    private string? successMessage;
    private string? errorMessage;
    private bool isLoading = true;
    private int userEmployeeId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get user claims from auth provider
            var claims = await ((ApiAuthenticationStateProvider)authStateProvider).GetClaims();
            if (claims == null)
            {
                Navigation.NavigateTo("/users/login");
                return;
            }

            string? rid = claims.FirstOrDefault(x => x.Type == "rid")?.Value;
            if (string.IsNullOrEmpty(rid))
            {
                errorMessage = "Unable to determine your profile ID.";
                isLoading = false;
                return;
            }

            userEmployeeId = Convert.ToInt32(rid);

            // Load employee profile
            var response = await employeeService.GetEmployeeByIdAsync(userEmployeeId);
            if (response.Success && response.Data != null)
            {
                employee = response.Data;

                // Fill update DTO with editable fields
                updateDto.FullName = employee.FullName;
                updateDto.PhoneNumber = employee.PhoneNumber;
                updateDto.Address = employee.Address;
                updateDto.EmergencyContact = employee.EmergencyContact;
                updateDto.HourlyWage = employee.HourlyWage;
            }
            else
            {
                errorMessage = response.Message ?? "Failed to load profile.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleUpdate()
    {
        successMessage = null;
        errorMessage = null;

        var response = await employeeService.UpdateEmployeeAsync(userEmployeeId, updateDto);

        if (response.Success)
        {
            successMessage = response.Message;
            StateHasChanged();

            await Task.Delay(3000);
            successMessage = null;


            // Refresh employee data
            var refreshed = await employeeService.GetEmployeeByIdAsync(userEmployeeId);
            if (refreshed.Success)
                employee = refreshed.Data;
        }
        else
        {
            errorMessage = response.Message ?? "Update failed.";
        }
    }
}