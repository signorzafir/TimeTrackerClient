@* @page "/user/registeremployee"
@using TimeTrackerClient.Services.Base
@using TimeTrackerClient.Services.Employee
@inject IEmployeeService employeeService
@inject NavigationManager navManager
@inject IJSRuntime JSRuntime

<h3>RegisterEmployee</h3>

@code {
    RegisterEmployeeDto RegistrationUserModel = new RegisterEmployeeDto();
   // List<RealtorFirmReadDto> realtorFirms = new();
    string errorMessage = string.Empty;
    string responseMessage = string.Empty;

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         ApiResponse<List<RealtorFirmReadDto>> response = await realtorFirmService.GetAllRealtorFirms();

    //         if (response.Data != null)
    //         {
    //             realtorFirms = response.Data;
    //         }

    //         responseMessage = response.Message;

    //         StateHasChanged();
    //     }
    // }

    private async Task HandleRegistration()
    {
        try
        {
            ApiResponse response = await employeeService.RegisterRealtorAsync(RegistrationUserModel);

            responseMessage = response.Message;

        }
        catch (ApiException aex)
        {
            if (aex.StatusCode >= 200 && aex.StatusCode <= 299)
            {
                NavigationManager.NavigateTo("/users/login");
            }
            errorMessage = aex.Response;
        }
    }

    private bool IsFormInvalid()
    {
        return string.IsNullOrWhiteSpace(RegistrationUserModel.Email) ||
               string.IsNullOrWhiteSpace(RegistrationUserModel.Password) ||
               string.IsNullOrWhiteSpace(RegistrationUserModel.FirstName) ||
               string.IsNullOrWhiteSpace(RegistrationUserModel.LastName) ||
               string.IsNullOrWhiteSpace(RegistrationUserModel.PhoneNumber) ||
               string.IsNullOrWhiteSpace(RegistrationUserModel.ProfileUrl) ||
               RegistrationUserModel.RealtorFirmId <= 0;
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
    private async Task Created()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
} *@
@page "/registeremployee"
@inject IEmployeeService employeeService
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using TimeTrackerClient.Services.Base
@using TimeTrackerClient.Services.Employee

<h3 style="margin-bottom: 20px;">Register Employee</h3>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div style="color: green; margin-bottom: 10px;">@successMessage</div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div style="color: red; margin-bottom: 10px;">@errorMessage</div>
}

<EditForm Model="dto" OnValidSubmit="HandleRegister" style="max-width: 400px;">
    <DataAnnotationsValidator />
    <ValidationSummary style="color: red;" />

    <div style="margin-bottom: 10px;">
        <label>Email</label>
        <InputText @bind-Value="dto.Email" style="width: 100%; padding: 5px;" />
    </div>

    <div style="margin-bottom: 10px;">
        <label>Password</label>
        <InputText @bind-Value="dto.Password" type="password" style="width: 100%; padding: 5px;" />
    </div>

    <div style="margin-bottom: 10px;">
        <label>Full Name</label>
        <InputText @bind-Value="dto.FullName" style="width: 100%; padding: 5px;" />
    </div>

    <div style="margin-bottom: 10px;">
        <label>Hourly Wage</label>
        <InputNumber @bind-Value="dto.HourlyWage" style="width: 100%; padding: 5px;" />
    </div>

    <div style="margin-bottom: 10px;">
        <label>Personal Number</label>
        <InputText @bind-Value="dto.PersonalNumber" style="width: 100%; padding: 5px;" />
    </div>

    <div style="margin-bottom: 10px;">
        <label>Phone Number</label>
        <InputText @bind-Value="dto.PhoneNumber" style="width: 100%; padding: 5px;" />
    </div>

    <div style="margin-bottom: 10px;">
        <label>Address</label>
        <InputText @bind-Value="dto.Address" style="width: 100%; padding: 5px;" />
    </div>

    <div style="margin-bottom: 10px;">
        <label>Emergency Contact</label>
        <InputText @bind-Value="dto.EmergencyContact" style="width: 100%; padding: 5px;" />
    </div>

    <div>
        <button type="submit" style="padding: 6px 12px; background-color: #4CAF50; color: white; border: none;">Register</button>
    </div>
</EditForm>

@code {
    private RegisterEmployeeDto dto = new();
    private string? successMessage;
    private string? errorMessage;

    private async Task HandleRegister()
    {
        successMessage = null;
        errorMessage = null;

        var response = await employeeService.RegisterEmployeeAsync(dto);

        if (response.Success)
        {
            successMessage = response.Message;
            dto = new(); // Clear form
        }
        else
        {
            errorMessage = response.Message ?? "Registration failed.";
        }
    }
    // private async Task RegisterNewEmployee()
    // {
    //     successMessage = null;
    //     errorMessage = null;

    //     try
    //     {
    //         var response = await employeeService.RegisterEmployeeAsync(dto);

    //         if (response.IsSuccessStatusCode)
    //         {
    //             successMessage = "Employee registered successfully!";
    //             dto = new(); // Clear form
    //         }
    //         else
    //         {
    //             var error = await response.Content.ReadAsStringAsync();
    //             errorMessage = $"Error: {error}";
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         errorMessage = $"Unexpected error: {ex.Message}";
    //     }
    // }

}