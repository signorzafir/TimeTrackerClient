@page "/admin/workEntriesByEmployee"
@using Microsoft.AspNetCore.Authorization
@using TimeTrackerClient.Services.Base
@using TimeTrackerClient.Services.Employee
@using TimeTrackerClient.Services.WorkEntry
@attribute [Authorize(Roles = "Administrator")]
@inject IEmployeeService employeeService
@inject IWorkEntryService workEntryService
@inject IJSRuntime JSRuntime


<div>
    <header style="text-align: center; margin-bottom: 40px;">
        <h1 style="font-size: 2.5rem; font-weight: 700; margin-bottom: 5px; color: #2C3E50;">TimeTracker Client</h1>
        <h2 style="font-size: 1.75rem; color: #7f8c8d; font-weight: 400;">Work Enties By Employee</h2>
    </header>
</div>


@if (employees is null)
{
    <p class="text-center mt-4">Loading employees...</p>
}
else
{
    <div class="d-flex justify-content-center mb-3">
        <div class="d-flex align-items-center gap-2">
            <label class="form-label mb-0">Select Employee:</label>
            <select @bind="selectedEmployeeId" class="form-select form-select-sm" style="width: 200px;">
                <option value="">-- Select Employee --</option>
                @foreach (var emp in employees)
                {
                    <option value="@emp.Id">@emp.FullName</option>
                }
            </select>
            <button class="btn btn-primary btn-sm" @onclick="LoadEntries" disabled="@(selectedEmployeeId == 0)">
                Get Entries
            </button>
        </div>
    </div>

    

    @if (entries != null)
    {
        <div class="d-flex justify-content-center">
            <div style="width: 90%; max-width: 900px;">
                @if (entries.Any())
                {
                    <table class="table table-striped table-bordered align-middle text-center">
                        <thead class="table-light">
                            <tr>
                                <th style="width: 20%;">Date</th>
                                <th style="width: 20%;">Duration</th>
                                <th style="width: 20%;">Wage</th>
                                <th style="width: 20%;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var entry in entries)
                            {
                                <tr>
                                    <td>@entry.Date.ToString("yyyy-MM-dd")</td>
                                    <td>@entry.Duration.ToString(@"hh\:mm")</td>
                                    <td>@entry.WageForEntry</td>
                                    <td>
                                        <button class="btn btn-outline-primary btn-sm me-1" @onclick="() => ShowUpdate(new WorkEntryRow{
                                            EmployeeName = entry.EmployeeName,
                                            EmployeeId = entry.EmployeeId,
                                            WorkEntryId = entry.Id,
                                            Date = entry.Date.DateTime,
                                            Duration = entry.Duration,
                                            Hours = entry.Duration.Hours,
                                            Minutes = entry.Duration.Minutes,
                                            WageForEntry = entry.WageForEntry
                                        })">Update</button>

                                        <button class="btn btn-outline-danger btn-sm" @onclick="() => ConfirmDelete(entry.Id)">Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p class="text-center">No work entries for this employee.</p>
                }

            </div>

        </div>
    }
}
@if (selectedRow != null)
{
    <div class="d-flex justify-content-center my-4">
        <div class="card p-4 border-primary" style="max-width: 600px; width: 100%;">
            <h5 class="mb-3 text-center">
                Update Work Entry for @selectedRow.EmployeeName
            </h5>
            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">Date</label>
                    <input type="date" @bind="selectedRow.Date" class="form-control form-control-sm" />
                </div>
                <div class="col-md-4">
                    <label class="form-label">Hours</label>
                    <input type="number" min="0" @bind="selectedRow.Hours" class="form-control form-control-sm text-center" />
                </div>
                <div class="col-md-4">
                    <label class="form-label">Minutes</label>
                    <input type="number" min="0" max="59" @bind="selectedRow.Minutes" class="form-control form-control-sm text-center" />
                </div>
            </div>
            <div class="mt-3 text-center">
                <button class="btn btn-success btn-sm me-2" @onclick="UpdateEntry">Save</button>
                <button class="btn btn-outline-secondary btn-sm" @onclick="@(() => selectedRow = null)">Cancel</button>
            </div>
        </div>
    </div>
}
@if (!string.IsNullOrWhiteSpace(statusMessage))
    {
        <div class="alert alert-success py-2 px-3 my-2 text-center mx-auto" style="max-width: 500px;">
            @statusMessage
        </div>
    }




@code {
    private List<EmployeeReadDto> employees = new();
    private EmployeeReadDto? selectedEmployee;
    private List<WorkEntryReadDto>? entries = new();
    private int selectedEmployeeId;
    private string? statusMessage;
    private List<WorkEntryRow> rows = new();
    private WorkEntryRow? selectedRow;


    protected override async Task OnInitializedAsync()
    {
        var response = await employeeService.GetAllEmployeesAsync();
        if (response.Success)
        {
            employees = response.Data.ToList();

        }

    }
    private async Task LoadEntries()
    {
        if (selectedEmployeeId != 0)
        {
            var response = await workEntryService.GetByEmployeeAsync(selectedEmployeeId);
            if (response.Success)
            {
                entries = response.Data.ToList();
            }

        }
        else
        {
            entries = null;
        }
    }
    private async Task ConfirmDelete(int entryId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Confirm Delete?");
        if (confirmed)
        {
            await workEntryService.DeleteAsync(entryId);
            await LoadEntries();
            statusMessage = "Work entry deleted successfully.";
            StateHasChanged();
            await Task.Delay(3000);
            statusMessage = null;
        }
    }
    private async void ShowUpdate(WorkEntryRow row)
    {
        selectedRow = new WorkEntryRow
        {
            WorkEntryId = row.WorkEntryId,
            EmployeeId = row.EmployeeId,
            EmployeeName = row.EmployeeName,
            Date = row.Date,
            Hours = row.Hours,
            Minutes = row.Minutes,
            WageForEntry = row.WageForEntry
        };
    }
    private async Task UpdateEntry()
    {
        var response = await employeeService.GetEmployeeByIdAsync(selectedRow.EmployeeId);
        if (response.Success)
        {
            selectedEmployee = response.Data;
        }
        // Calculate wage for entry
        var duration = new System.TimeSpan(selectedRow.Hours, selectedRow.Minutes, 0);
        selectedRow.Duration = duration;
        var totalHours = selectedRow.Duration.TotalHours;
                selectedRow.WageForEntry = Math.Round(selectedEmployee.HourlyWage * totalHours);

        if (selectedRow == null)
            return;

        var updateDto = new WorkEntryUpdateDto
        {
            Date = selectedRow.Date,
            Duration = selectedRow.Duration,
            WageForEntry = selectedRow.WageForEntry
        };

        await workEntryService.UpdateAsync(selectedRow.WorkEntryId, updateDto);
        await LoadEntries();

        selectedRow = null;
        statusMessage = "Work entry Updated successfully.";
            StateHasChanged();
            await Task.Delay(3000);
            statusMessage = null;
    }
    private class WorkEntryRow
    {
        public int WorkEntryId { get; set; }
        public int EmployeeId { get; set; }
        public string EmployeeName { get; set; }
        public DateTime Date { get; set; }
        public System.TimeSpan Duration { get; set; }
        public int Hours { get; set; }
        public int Minutes { get; set; }
        public double WageForEntry { get; set; }
    }
}
