@page "/admin/employees1"
@using Microsoft.AspNetCore.Authorization
@using TimeTrackerClient.Services.Base
@using TimeTrackerClient.Services.Employee
@attribute [Authorize(Roles = "Administrator")]
@inject IEmployeeService EmployeeService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Employees Management</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="mb-0">
                        <i class="fas fa-users me-2"></i>Employees Management
                    </h3>
                    @* <div class="d-flex gap-2">
                        <div class="input-group" style="width: 300px;">
                            <span class="input-group-text">
                                <i class="fas fa-search"></i>
                            </span>
                            <input type="text" class="form-control" placeholder="Search employees..."
                                   @bind="searchTerm" @onkeyup="FilterEmployees" />
                        </div>
                        <button class="btn btn-primary" @onclick="NavigateToCreate">
                            <i class="fas fa-plus me-2"></i>Add Employee
                        </button>
                    </div> *@
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading employees...</p>
                        </div>
                    }
                    @* else if (filteredEmployees.Any())
                    {
                        <!-- Summary Cards -->
                        <div class="row mb-4">
                            <div class="col-md-4">
                                <div class="card bg-primary text-white">
                                    <div class="card-body">
                                        <h5 class="card-title">
                                            <i class="fas fa-users me-2"></i>Total Employees
                                        </h5>
                                        <h3 class="mb-0">@employees.Count</h3>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card bg-success text-white">
                                    <div class="card-body">
                                        <h5 class="card-title">
                                            <i class="fas fa-dollar-sign me-2"></i>Avg Hourly Wage
                                        </h5>
                                        <h3 class="mb-0">@(employees.Any() ? employees.Average(e => e.HourlyWage).ToString("C") : "$0.00")</h3>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card bg-info text-white">
                                    <div class="card-body">
                                        <h5 class="card-title">
                                            <i class="fas fa-chart-line me-2"></i>Active Workers
                                        </h5>
                                        <h3 class="mb-0">@employees.Count(e => e.WorkEntries?.Any() == true)</h3>
                                    </div>
                                </div>
                            </div>
                        </div> *@

                        <!-- Employees Table -->
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th @onclick="() => SortBy(nameof(EmployeeReadDto.FullName))" style="cursor: pointer;">
                                            Name
                                            @if (sortField == nameof(EmployeeReadDto.FullName))
                                            {
                                                <i class="fas fa-sort-@(sortAscending ? "up" : "down") ms-1"></i>
                                            }
                                        </th>
                                        <th>Contact</th>
                                        <th @onclick="() => SortBy(nameof(EmployeeReadDto.HourlyWage))" style="cursor: pointer;">
                                            Hourly Wage
                                            @if (sortField == nameof(EmployeeReadDto.HourlyWage))
                                            {
                                                <i class="fas fa-sort-@(sortAscending ? "up" : "down") ms-1"></i>
                                            }
                                        </th>
                                        <th>Work Entries</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var employee in GetSortedEmployees())
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <div class="avatar-circle me-3">
                                                        @employee.FullName.Substring(0, 2).ToUpper()
                                                    </div>
                                                    <div>
                                                        <strong>@employee.FullName</strong>
                                                        <br />
                                                        <small class="text-muted">Personal Number: @employee.PersonalNumber</small>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <i class="fas fa-phone me-1"></i>@employee.PhoneNumber
                                                <br />
                                                <i class="fas fa-map-marker-alt me-1"></i>
                                                <small class="text-muted">@(employee.Address?.Length > 30 ? employee.Address.Substring(0, 30) + "..." : employee.Address)</small>
                                            </td>
                                            <td>
                                                <span class="badge bg-success fs-6">@employee.HourlyWage.ToString("C")</span>
                                            </td>
                                            <td>
                                                @if (employee.WorkEntries?.Any() == true)
                                                {
                                                    <span class="badge bg-primary">@employee.WorkEntries.Count entries</span>
                                                    <br />
                                                    <small class="text-muted">
                                                        Total: @employee.WorkEntries.Sum(w => w.WageForEntry).ToString("C")
                                                    </small>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">No entries</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-info"
                                                            @onclick="() => ViewEmployee(employee.Id)"
                                                            title="View Details">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-primary"
                                                            @onclick="() => EditEmployee(employee.Id)"
                                                            title="Edit">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger"
                                                            @onclick="() => ShowDeleteConfirmation(employee)"
                                                            title="Delete">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    
                    @* else
                    {
                        <div class="text-center text-muted py-5">
                            <i class="fas fa-users fa-4x mb-3"></i>
                            <h4>@(string.IsNullOrEmpty(searchTerm) ? "No employees found" : "No matching employees")</h4>
                            <p>@(string.IsNullOrEmpty(searchTerm) ? "Start by adding your first employee." : $"No employees match '{searchTerm}'")</p>
                            @if (string.IsNullOrEmpty(searchTerm))
                            {
                                <button class="btn btn-primary" @onclick="NavigateToCreate">
                                    <i class="fas fa-plus me-2"></i>Add First Employee
                                </button>
                            }
                        </div>
                    } *@

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">
                            <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success mt-3">
                            <i class="fas fa-check-circle me-2"></i>@successMessage
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if (showDeleteModal && deletingEmployee != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>Confirm Delete
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this employee?</p>
                    <div class="card bg-light">
                        <div class="card-body">
                            <strong>Name:</strong> @deletingEmployee.FullName<br />
                            <strong>Personal Number:</strong> @deletingEmployee.PersonalNumber<br />
                            <strong>Phone:</strong> @deletingEmployee.PhoneNumber<br />
                            @if (deletingEmployee.WorkEntries?.Any() == true)
                            {
                                <hr />
                                <div class="text-warning">
                                    <i class="fas fa-exclamation-triangle me-1"></i>
                                    <strong>Warning:</strong> This employee has @deletingEmployee.WorkEntries.Count work entries.
                                </div>
                            }
                        </div>
                    </div>
                    <div class="alert alert-danger mt-3">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Warning:</strong> This action cannot be undone.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteEmployee" disabled="@isDeleting">
                        @if (isDeleting)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        else
                        {
                            <i class="fas fa-trash me-2"></i>
                        }
                        Delete Employee
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .avatar-circle {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #6c757d;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 0.8rem;
    }
</style>

@code {
    private List<EmployeeReadDto> employees = new();
    private List<EmployeeReadDto> filteredEmployees = new();
    private EmployeeReadDto? deletingEmployee;

    private bool isLoading = true;
    private bool isDeleting = false;
    private bool showDeleteModal = false;

    private string errorMessage = "";
    private string successMessage = "";
    private string searchTerm = "";
    private string sortField = nameof(EmployeeReadDto.FullName);
    private bool sortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        try
        {
            isLoading = true;
            errorMessage = "";

            var result = await EmployeeService.GetAllEmployeesAsync();
            if (result.Success)
            {
                employees = result.Data.ToList();
                filteredEmployees = employees;
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading employees: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterEmployees()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredEmployees = employees;
        }
        else
        {
            filteredEmployees = employees.Where(e =>
                e.FullName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                e.PersonalNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                e.PhoneNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true ||
                e.Address?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true
            ).ToList();
        }
    }

    private void SortBy(string field)
    {
        if (sortField == field)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortField = field;
            sortAscending = true;
        }
    }

    private IEnumerable<EmployeeReadDto> GetSortedEmployees()
    {
        return sortField switch
        {
            nameof(EmployeeReadDto.FullName) => sortAscending
                ? filteredEmployees.OrderBy(e => e.FullName)
                : filteredEmployees.OrderByDescending(e => e.FullName),
            nameof(EmployeeReadDto.HourlyWage) => sortAscending
                ? filteredEmployees.OrderBy(e => e.HourlyWage)
                : filteredEmployees.OrderByDescending(e => e.HourlyWage),
            _ => filteredEmployees.OrderBy(e => e.FullName)
        };
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/admin/employees/create");
    }

    private void ViewEmployee(int id)
    {
        Navigation.NavigateTo($"/admin/employees/view/{id}");
    }

    private void EditEmployee(int id)
    {
        Navigation.NavigateTo($"/admin/employees/edit/{id}");
    }

    private void ShowDeleteConfirmation(EmployeeReadDto employee)
    {
        deletingEmployee = employee;
        showDeleteModal = true;
        errorMessage = "";
        successMessage = "";
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        deletingEmployee = null;
    }

    private async Task DeleteEmployee()
    {
        try
        {
            isDeleting = true;
            errorMessage = "";

            if (deletingEmployee == null) return;

            var result = await EmployeeService.DeleteEmployeeAsync(deletingEmployee.Id);

            if (result.Success)
            {
                successMessage = $"Employee '{deletingEmployee.FullName}' deleted successfully!";
                CloseDeleteModal();
                await LoadEmployees();

                // Hide success message after 3 seconds
                await Task.Delay(3000);
                successMessage = "";
                StateHasChanged();
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while deleting employee: {ex.Message}";
        }
        finally
        {
            isDeleting = false;
        }
    }
}